package gamedata;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * Holds all the data that is encoded for a level
 * such as:
 * 1) Enemies
 * 2) Preferences (e.g., waves of attack)
 * 3) Difficulty
 * 4) Duration of enemy attack
 * 5) Health, attack and speed multipliers
 * (more of each with higher levels)
 * 
 * Generated by the Game Authoring Environment and
 * invoked in the GameController when 
 * new LevelControllers are created.
 * 
 * @author maddiebriere
 *
 */
public class LevelData {
	private List<WaveData> myWaves;
	private double difficulty;
	private double duration; 
	
	private final double DEFAULT = 1;
	
	private Optional<Double> healthMultiplier;
	private Optional<Double> attackMultiplier;
	private Optional<Double> speedMultiplier;

	public LevelData(){
		this(100);//TODO: Choose better #
	}
	
	public LevelData(double duration){
		this.duration = duration;
		this.difficulty = DEFAULT;
		myWaves= new ArrayList<WaveData>();
	}
	
	public int getNumWaves(){
		return myWaves.size();
	}
	
	public void addWave(WaveData data){
		myWaves.add(data);
	}
	
	/**
	 * Add an enemy type (ActorData) with a number representing its frequency (E.g., 50 Goblins) 
	 * and a List of available Paths for that enemy, corresponding to numbers (these numbers
	 * can be retrieved via the PathData in GameData or using the getPathOptions method in GameData).
	 * 
	 * Assumption: There is only a single wave for sprint #1
	 * 
	 * @param ActorData Integer representing enemy in Actor map
	 * @param number Number of the enemy (E.g., 50 attackers)
	 */
	/*public void addWaveEnemy(ActorData actor, Integer number){
		myEnemyWave.addWaveEnemy(new EnemyInWaveData(actor, number));
	}
	*/
	

	/**
	 * Assumed single wave right now (for first sprint), retrieve all of the enemies attacking
	 * in this wave, in the form of EnemyInWaveData objects.
	 * 
	 * @return A List of EnemyInWaveData objects, each which holds an ActorData, Integer 
	 * (frequency) and List of paths.
	 */
	/*public List<EnemyInWaveData> getTroops() {
		return myEnemyWave.getWaveEnemies();
	}*/


	public double getDifficulty() {
		return difficulty;
	}

	public double getDuration() {
		return duration;
	}

	public void setDuration(double duration) {
		this.duration = duration;
	}

	public double getHealthMultiplier() {
		return healthMultiplier.orElse(DEFAULT);
	}

	public void setHealthMultiplier(Optional<Double> healthMultiplier) {
		this.healthMultiplier = healthMultiplier;
	}

	public double getAttackMultiplier() {
		return attackMultiplier.orElse(DEFAULT);
	}

	public void setAttackMultiplier(Optional<Double> attackMultiplier) {
		this.attackMultiplier = attackMultiplier;
	}

	public double getSpeedMultiplier() {
		return speedMultiplier.orElse(DEFAULT);
	}

	public void setSpeedMultiplier(Optional<Double> speedMultiplier) {
		this.speedMultiplier = speedMultiplier;
	}

	public void setDifficulty(double d) {
		difficulty = d;
	}

	public List<WaveData> getMyWaves() {
		return myWaves;
	}

	public void setMyWaves(List<WaveData> myWaves) {
		this.myWaves = myWaves;
	}
	
	
	
}
